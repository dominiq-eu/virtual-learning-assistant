{"version":3,"sources":["data/app.js","data/request.js","data/response.js","gateways/http/web-service.js","gateways/http/index.js","gateways/telegram/index.js","middleware/nlp.js","index.js"],"names":["Let","require","App","fn","x","sources","layer","add","s","concat","use","l","do","f","start","dataPipeline","reduce","g","In","forEach","module","exports","Type","Data","StringType","RequestType","path","String","payload","Object","NLP","v","is","sentence","val","Union","Result","Random","RandomOkType","Ok","derive","val_list","Response","Success","Error","Err","Express","Compression","BodyParser","Url","Http","Log","log","HttpHeader","method","url","headers","HttpRequest","http","data","isObject","obj","toPromise","p","then","Promise","resolve","toString","response","JSON","stringify","isObjEmpty","Boolean","keys","length","app","json","urlencoded","extended","all","req","res","next","parse","debug","request","pathname","query","body","handler","r","write","end","program","port","prog","createServer","listen","WebService","Request","cfg","TeleBot","Pipe","ParseMode","Text","of","Markdown","HTML","TelegramGateway","token","parseMode","check","bot","polling","interval","on","msg","text","andThen","value","case","error","answer","sendMessage","from","id","replyToMessage","message_id","catch","e","Snowball","Natural","NlpToolkit","StopwordsIso","Fs","Language","de","en","State","lang","functions","getSubDirs","dir","readdirSync","map","file","filter","statSync","isDirectory","ret","d","getNlpFunctions","sentences","replace","cleanStopwords","split","w","includes","join","trim","StemmSnowball","stemmer","cleanedText","toLowerCase","setCurrent","stem","getCurrent","Normalize","tokenizer","stemmed","calcSimilarity","withStr","matchStr","s1","s2","JaroWinklerDistance","getMatch","sort","val_a","s_a","val_b","s_b","txt","getPropability","match","undefined","getMatches","line","propability","a","b","findModule","matchTable","fnPath","newRequest","HTTPGateway","NLPMiddleware","Path","process","cwd","loadFunction","Router","console","Service"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["/*\n    App.js\n\n    Provides a data structure for basic app behaivor.\n*/\n\nconst { Let } = require('@fntk/utils')\n\n//\n// App\n//  * fn: The app logic\n//  * sources: A list of functions that act as data sources and generate data\n//  * layer: A list of functions that builds a pipeline and manipulate the\n//           data before reaching the app logic (fn)\n//\n// App :: Function -> List(Function) -> List(Function) -> Nothing\nconst App = (fn = x => x, sources = [], layer = []) => ({\n    // Here we add data sources. They can create data and feed in\n    // the system.\n    add: s => App(fn, sources.concat([s]), layer),\n\n    // Here we add a middleware layer to manipulate the data on his way\n    // trough the system, before it reaches it's final processing.\n    use: l => App(fn, sources, layer.concat([l])),\n\n    // Add the data processing. This is the main logic of the app.\n    do: f => App(f, sources, layer),\n\n    // Start the app\n    start: () =>\n        Let({\n            // Build the data pipeline. Incoming data is passed to all\n            // layers of middleware in the order we defined it earlier\n            // trough the .use() function.\n            dataPipeline: layer\n                // Add the program logic as last step, after the\n                // middleware layer\n                .concat(fn)\n                // Build the pipeline using composition\n                .reduce((f, g) => x => g(f(x)), x => x)\n        }).In(({ dataPipeline }) =>\n            // Hand the data processing pipeline to the data sources,\n            // so that every source can pass new data to the app.\n            sources.forEach(s => s(dataPipeline))\n        )\n})\n\nmodule.exports = App\n","/*\n    Request\n\n    Provides a data structure that represents an incoming request.\n*/\n\nconst { Type, Data, StringType } = require('@fntk/types')\n\nconst RequestType = Data('Request', {\n    path: String,\n    payload: Object\n})\n\nRequestType.NLP = Type(\n    'NLP',\n    v => RequestType.is(v) && StringType.is(v.payload.sentence),\n    val => ({\n        path: '/',\n        payload: { sentence: StringType(val) }\n    })\n)\n\n// RequestType.NLP = RequestType.derive(val => ({\n//     path: '/',\n//     payload: { sentence: StringType(val) }\n// }))\n\n// const Request = Union('Request', {\n//     Request: RequestType,\n//     NLP: NLPRequestType\n// })\n\nmodule.exports = RequestType\n","/*\n    Request\n\n    Provides a data structure that represents an incoming request.\n*/\n\nconst { Union, Result } = require('@fntk/types')\nconst { Random } = require('@fntk/utils')\n\nconst RandomOkType = Result.Ok.derive(val_list => Random(val_list))\n\nconst Response = Union('Response', {\n    Success: Result.Ok,\n    Error: Result.Err,\n    Random: RandomOkType\n})\n\nmodule.exports = Response\n","// Express\nconst Express = require('express')\nconst Compression = require('compression')\nconst BodyParser = require('body-parser')\n\n// Node\nconst Url = require('url')\nconst Http = require('http')\n\nconst { Data } = require('@fntk/types')\nconst { Log } = require('@fntk/utils')\n\nconst log = Log('WebService')\n\n//\n// -- Types\n//\n\nconst HttpHeader = Data('HTTPHeader', {\n    method: String,\n    url: String,\n    path: String,\n    headers: Object\n})\n\nconst HttpRequest = Data('HTTPRequest', {\n    http: HttpHeader,\n    data: Object\n})\n\n//\n// -- Helper\n//\nconst isObject = obj => obj !== null && typeof obj === 'object'\nconst toPromise = p => (p.then ? p : Promise.resolve(p))\nconst toString = response =>\n    isObject(response) ? JSON.stringify(response, 0, 4) : response\nconst isObjEmpty = obj => Boolean(Object.keys(obj).length)\n\n// app :: ()\nconst app = fn =>\n    Express()\n        .use(Compression()) // Compression support\n        .use(BodyParser.json()) // Automatic parsing of the response body\n        .use(BodyParser.urlencoded({ extended: true }))\n        // Catch route\n        .all('*', (req, res, next) => {\n            const url = Url.parse(req.url, true)\n            log.debug('URL', url)\n            const request = HttpRequest({\n                http: HttpHeader({\n                    method: req.method,\n                    headers: req.headers,\n                    url: req.url,\n                    path: url.pathname\n                }),\n                data: isObjEmpty(url.query) ? url.query : req.body\n            })\n            log.debug('Request', request)\n            const handler = r => toPromise(fn(r))\n            return handler(request)\n                .then(toString)\n                .then(response => {\n                    log.debug('[WebService] Response: ', response)\n                    res.write(response)\n                    return res.end()\n                })\n        })\n\n// program :: { Int, [ Route ]}\nconst program = fn => {\n    // Configuration\n    const port = 8000\n    const prog = app(fn)\n\n    Http.createServer(prog).listen(port, () =>\n        log.debug(`Listening on: 0.0.0.0:${port}`)\n    )\n    return port\n}\n\nmodule.exports = { program }\n","/*\n    HttpListener\n\n    Listen to http events and forward them back to the app for handling.\n*/\n\nconst WebService = require('./web-service')\nconst Request = require('../../data/request')\nconst { Log } = require('@fntk/utils')\n\nconst log = Log('HTTPGateway')\n\n// Get http requests, send them to the system for processing and\n// send the response after successfull handling.\nmodule.exports = cfg => fn =>\n    WebService.program(request => {\n        log.debug('HTTPRequest', request)\n        const req = Request({\n            path: request.http.path,\n            payload: request.data\n        })\n        log.debug('Request', req)\n        return fn(req)\n    })\n","/*\n    telegram.js\n\n    Get updates from telegram.\n*/\n\nconst Request = require('../../data/request')\nconst Response = require('../../data/response')\nconst TeleBot = require('telebot')\nconst { Union, StringType } = require('@fntk/types')\nconst { Log, Pipe } = require('@fntk/utils')\n\nconst log = Log('TelegramGateway')\n\n//\n// -- Helper --\n//\nconst toPromise = p => (p.then ? p : Promise.resolve(p))\n\n//\n// -- Types --\n//\n\nconst ParseMode = Union('TelegramParseMode', {\n    Text: StringType.of('Text'),\n    Markdown: StringType.of('Markdown'),\n    HTML: StringType.of('HTML')\n})\n\n// On token:\n// https://core.telegram.org/bots/api#authorizing-your-bot\n//\n// On parseMode:\n// https://core.telegram.org/bots/api#formatting-options\n//\nconst TelegramGateway = function({ token, parseMode = ParseMode.Text() }) {\n    log.debug('parseMode', parseMode)\n    ParseMode.check(parseMode)\n    log.debug('ParseMode', parseMode)\n    return fn => {\n        const bot = new TeleBot({\n            token,\n            polling: {\n                interval: 1000\n            }\n        })\n\n        // eslint-disable-next-line fp/no-unused-expression\n        bot.on('text', msg =>\n            // Create NLP Request and send it to the system to\n            // produce a response.\n            Pipe(Request.NLP(msg.text))\n                .andThen(req => toPromise(fn(req)))\n                // Get Response from the system guaranteed as Promise<Response>\n                .value()\n                // .. and handle it.\n                .then(log.debug('Response'))\n                .then(response =>\n                    Response.case(response, {\n                        Success: () => response.value,\n                        Error: () => response.error\n                    })\n                )\n                .then(log.debug('Answer'))\n                .then(answer =>\n                    bot.sendMessage(msg.from.id, answer, {\n                        parseMode,\n                        replyToMessage: msg.message_id\n                    })\n                )\n                .catch(log.error('Error'))\n                .catch(e =>\n                    bot.sendMessage(msg.from.id, 'Internal Error', {\n                        replyToMessage: msg.message_id\n                    })\n                )\n        )\n        return bot.start()\n    }\n}\nTelegramGateway.ParseMode = ParseMode\n\nmodule.exports = TelegramGateway\n","/*\n    Route sentences to modules using nlp technics.\n*/\n\n// const Franc = require('franc') // Language detection\n// const Tokenizer = require('./stem/tokenizer')\nconst Snowball = require('snowball')\nconst Natural = require('natural') // sentence similarity\nconst NlpToolkit = require('nlp-toolkit')\nconst StopwordsIso = require('stopwords-iso')\nconst Fs = require('fs')\n\n// const GerSnowball = require('./snowball-ger')\n\nconst Request = require('../data/request')\nconst Response = require('../data/response')\nconst { Log } = require('@fntk/utils')\n\nconst log = Log('NLPMiddleware')\n\n// Languages :: Languages\nconst Language = {\n    de: 'German',\n    en: 'English'\n}\n\n// State :: State\nconst State = {\n    lang: 'de',\n    functions: []\n}\n\n//\n// -- Utils\n//\n\n// getSubDirs :: String => String[]\nconst getSubDirs = dir =>\n    Fs.readdirSync(dir)\n        // Convert the filename to a full path, filter out all\n        // directories and look recursively for more nested dirs.\n        .map(file => `${dir}/${file}`)\n        .filter(file => Fs.statSync(file).isDirectory())\n        .reduce(\n            (ret, d) =>\n                ret\n                    // Add found dirs to return value and look for\n                    // more nested dirs.\n                    .concat(d)\n                    .concat(getSubDirs(d)),\n            []\n        )\n\n// getNlpFunctions :: String => NlpFunction[]\nconst getNlpFunctions = dir =>\n    getSubDirs(dir).reduce((ret, path) => {\n        try {\n            const cfg = require(`${path}/function.json`)\n            if (cfg.sentences.de || cfg.sentences.en) {\n                return ret.concat([\n                    {\n                        path: path.replace(dir, ''),\n                        sentences: cfg.sentences\n                    }\n                ])\n            }\n        } catch (e) {\n            // Not found, or something else..\n            // console.error('NLPFunction:', e)\n        }\n        return ret\n    }, [])\n\n// cleanStopwords :: String => Language => String\nconst cleanStopwords = (text, lang) =>\n    text\n        // split sentence to an array of words\n        .split(' ')\n        // Filter all stopwords\n        .filter(w => !StopwordsIso[lang].includes(w))\n        // create string again\n        .join(' ')\n        .trim()\n\n// StemmSnowball :: String -> String\nconst StemmSnowball = text => {\n    if (text.length > 5) {\n        const stemmer = new Snowball(Language[State.lang])\n        const cleanedText = cleanStopwords(\n            text.toLowerCase().trim(),\n            State.lang\n        )\n        stemmer.setCurrent(cleanedText)\n        stemmer.stem()\n        return stemmer.getCurrent()\n    }\n    return text.toLowerCase()\n}\n\n// const GerStemmer = text => {\n//     const cleanedText = cleanStopwords(text.toLowerCase().trim(), State.lang)\n//     return GerSnowball(cleanedText)\n// }\n\n// Normalize :: String -> String\nconst Normalize = text => {\n    const token = NlpToolkit.tokenizer(text)\n    const stemmed = NlpToolkit.stemmer(token, { lang: State.lang })\n    return cleanStopwords(stemmed.join(' ').trim(), State.lang)\n}\n\n// Normalize :: (String => String) -> String -> String -> { val: Number, msg: String }\nconst calcSimilarity = (stemmer, withStr, matchStr) => {\n    const s1 = stemmer(matchStr.toLowerCase().trim())\n    const s2 = stemmer(withStr.toLowerCase().trim())\n    const value = Natural.JaroWinklerDistance(s1, s2)\n\n    return [value, s1]\n}\n\nconst getMatch = (stemmer, text, sentences) =>\n    sentences\n        .map(s => calcSimilarity(stemmer, text, s))\n        .sort(([val_a, s_a], [val_b, s_b]) => val_b - val_a)\n        // .map(log.debug('#'))\n        .filter(([val, sentence]) => val >= 0.75)\n        .map(([value, txt]) => ({\n            value,\n            txt\n        }))\n\n// getPropability :: String -> FnStruct -> Number\nconst getPropability = (text, fn) => {\n    // const match = getMatch(GerStemmer, text, fn.sentences.de)[0]\n    const match = getMatch(StemmSnowball, text, fn.sentences.de)[0]\n    return (match && match.value) !== undefined ? match.value : 0\n}\n\n// getMatches :: fn[] -> fn\nconst getMatches = functions => line =>\n    functions\n        .reduce(\n            (ret, fn) =>\n                ret.concat([\n                    {\n                        propability: getPropability(line, fn),\n                        // fn: fn.fn,\n                        sentences: fn.sentences,\n                        path: fn.path\n                    }\n                ]),\n            []\n        )\n        .filter(fn => fn.propability > 0)\n        .sort((a, b) => b.propability - a.propability)\n\n// default :: Path => NlpRequest => Request\nmodule.exports = ({ path }) => {\n    // Load nlp functions\n    log.debug('Path', path)\n    State.functions = getNlpFunctions(path)\n    log.debug('GetNlpFunctions', State.functions)\n    const findModule = getMatches(State.functions)\n    log.debug('getMatch', findModule)\n    return request => {\n        log.debug('request', request)\n        if (Request.NLP.is(request)) {\n            const sentence = request.payload.sentence\n            const matchTable = findModule(sentence)\n            log.debug('MatchTable', matchTable)\n            if (matchTable.length > 0) {\n                const match = matchTable[0]\n                const fnPath = match.path\n                const newRequest = Request({\n                    path: fnPath,\n                    payload: { sentence }\n                })\n                log.debug('NewRequest', newRequest)\n                return newRequest\n            }\n        }\n        return request\n    }\n}\n\n//\n// -- Cmdline interface\n//\n//\n// const Readline = require('readline')\n// const input = Readline.createInterface(process.stdin, process.stdout)\n//\n// log.debug('Loading..')\n// State.functions = getNlpFunctions('../../modules/functions')\n//\n// log.debug('Test against:\\n')\n// State.functions\n//     // print sentences\n//     .map(f => f.sentences)\n//     .map(trace('Function:\\n'))\n//\n// input.setPrompt('\\n\\n> ')\n// input.prompt()\n// input\n//     .on('line', line => {\n//         if (line == 'exit') {\n//             input.close()\n//         }\n//         log.debug('')\n//\n//         const stemmer = [/*StemmPorter2,*/ StemmSnowball, Normalize]\n//         const matchTable = State.functions\n//             .reduce(\n//                 (ret, fn) =>\n//                     ret.concat([\n//                         {\n//                             propability: getPropability(line, fn),\n//                             fn: fn.fn,\n//                             sentences: fn.sentences\n//                         }\n//                     ]),\n//                 []\n//             )\n//             .filter(fn => fn.propability > 0)\n//             .sort((a, b) => b.propability - a.propability)\n//         log.debug('MatchTable:\\n', matchTable)\n//\n//         if (matchTable.length > 0) {\n//             const fn = matchTable[0]\n//             fn.fn(line)\n//         } else {\n//             log.debug('No Match!')\n//         }\n//         input.prompt()\n//     })\n//     .on('close', () => {\n//         process.exit(0)\n//     })\n//\n","// TODO: Modify node search path for modules\n// See:\n// https://gist.github.com/branneman/8048520\n//global.include = path => require(`${__dirname}/${path}`)\n\n//\n// -- Imports --\n//\nconst App = require('./data/app')\nconst Request = require('./data/request')\nconst Response = require('./data/response')\nconst HTTPGateway = require('./gateways/http')\nconst TelegramGateway = require('./gateways/telegram')\nconst NLPMiddleware = require('./middleware/nlp')\nconst Path = require('path')\n\n//\n// -- Config --\n//\nconst path = Path.resolve(process.cwd()) + '/functions'\nconst port = 3000\n\n//\n// -- Logic --\n//\nconst loadFunction = (req, path) => {\n    const fn = require(path)\n    return fn(req.payload)\n}\n\nconst Router = ({ path }) => request => {\n    if (Request.is(request)) {\n        const fnPath = `${path}${request.path}`\n        try {\n            console.log('[Router] Path:', fnPath)\n            console.log('[Router] Request:', request)\n            return loadFunction(request, fnPath)\n        } catch (e) {\n            console.log('Load Function: Error: ', e)\n            return Response.Error(\"Can't find \" + fnPath)\n        }\n    }\n    return Response.Error('Invalid request: ' + request)\n}\n\nconst Service = () =>\n    App()\n        // Add data sources\n        .add(HTTPGateway({ port }))\n        // Add data manipulation pipeline steps\n        .use(NLPMiddleware({ path }))\n        // Add data processing\n        .do(Router({ path }))\n\n//\n// -- Exports --\n//\nmodule.exports = {\n    Service,\n    App,\n    Router: () => Router({ path }),\n    Request,\n    Response,\n    HTTPGateway,\n    TelegramGateway,\n    NLPMiddleware\n}\n"]}